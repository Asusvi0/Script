import json
import os
import requests
import telebot
from telebot import types
import concurrent.futures


# Your bot token
API_TOKEN = '7586163097:AAFW-1cPYSRPGOdq9zJr0kOJh--gknZjyUU'
bot = telebot.TeleBot(API_TOKEN)

ADMIN_ID = 5492311099  # Change this to the admin's Telegram user ID
# ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


def load_admins():
    if os.path.exists('admins.json'):
        with open('admins.json', 'r') as f:
            return json.load(f)
    return [ADMIN_ID]

def save_admins(admins):
    with open('admins.json', 'w') as f:
        json.dump(admins, f, indent=4)

ADMINS = load_admins()

def is_admin(user_id):
    return user_id in ADMINS

@bot.message_handler(commands=['adminmenu'])
def admin_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")

    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", callback_data="add_admin"),
        types.InlineKeyboardButton("‚ûñ ‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", callback_data="remove_admin"),
        types.InlineKeyboardButton("üìú ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", callback_data="list_admins"),
        types.InlineKeyboardButton("üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå", callback_data="create_key"),
        types.InlineKeyboardButton("üì¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", callback_data="broadcast"),
    ]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "üìå **‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô** üìå\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(commands=['addadmin'])
def add_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ")

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return bot.reply_to(message, "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ /addadmin <user_id>")

    new_admin_id = int(args[1])
    if new_admin_id in ADMINS:
        return bot.reply_to(message, "‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")

    ADMINS.append(new_admin_id)
    save_admins(ADMINS)
    bot.reply_to(message, f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ID: {new_admin_id}")

@bot.message_handler(commands=['removeadmin'])
def remove_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ")

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return bot.reply_to(message, "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ /removeadmin <user_id>")

    admin_id = int(args[1])
    if admin_id == ADMIN_ID:
        return bot.reply_to(message, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ!")

    if admin_id not in ADMINS:
        return bot.reply_to(message, "‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")

    ADMINS.remove(admin_id)
    save_admins(ADMINS)
    bot.reply_to(message, f"‚úÖ ‡∏•‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ID: {admin_id}")
    
    
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô redeem
@bot.message_handler(commands=['redeem'])
def redeem(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        return bot.reply_to(message, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡πÉ‡∏ä‡πâ /redeem <key>")

    key = args[1]
    
    if not os.path.exists('key.json'):
        return bot.reply_to(message, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå")
    
    with open('key.json', 'r') as f:
        keys = json.load(f)

    if key not in keys:
        return bot.reply_to(message, "‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    user_id = str(message.from_user.id)
    
    if not os.path.exists('user.json'):
        users = {}
    else:
        with open('user.json', 'r') as f:
            users = json.load(f)
    
    users.setdefault(user_id, {"used_keys": {}, "remaining_keys": {}})
    users[user_id]["remaining_keys"][key] = users[user_id]["remaining_keys"].get(key, 0) + keys[key]
    users[user_id]["used_keys"].setdefault(key, 0)
    
    with open('user.json', 'w') as f:
        json.dump(users, f, indent=4)

    del keys[key]
    with open('key.json', 'w') as f:
        json.dump(keys, f, indent=4)

    bot.reply_to(message, f"‡∏Ñ‡∏µ‡∏¢‡πå {key} ‡∏ñ‡∏π‡∏Å redeem ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    bot.send_message(
        ADMIN_ID, 
        f"üîî ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå üîî\n"
      #  f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {username} ({user_id})\n"
        f"üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {key}"
    )
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô info
@bot.message_handler(commands=['info'])
def info(message: types.Message):
    user_id = str(message.from_user.id)
    
    if not os.path.exists('user.json'):
        return bot.reply_to(message, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå")

    with open('user.json', 'r') as f:
        users = json.load(f)

    if user_id not in users or not users[user_id]["remaining_keys"]:
        return bot.reply_to(message, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")

    response = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n"
    for key, remaining_usage in users[user_id]["remaining_keys"].items():
        used_usage = users[user_id]["used_keys"].get(key, 0)
        response += (f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üîã\n"
                     f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {remaining_usage} ‡∏Ñ‡∏£‡∏±‡πâ‡∏áüì±\n"
                     f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: {used_usage} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‚ùó\n\n")
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['activeusers'])
def active_user_count(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ.")

    if not os.path.exists('user.json'):
        return bot.reply_to(message, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå")

    with open('user.json', 'r') as f:
        users = json.load(f)

    active_users = sum(1 for user in users.values() if user["remaining_keys"])
    bot.reply_to(message, f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà: {active_users} ‡∏Ñ‡∏ô")


@bot.message_handler(commands=['help'])
def help_command(message: types.Message):
    help_text = (
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ üåê:\n"
        "/start - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏óüü¢\n"
        "/help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠üîã\n"
        "/search <URL> - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå logüìÑ\n"
        "/redeem <key> - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üîë\n"
        "/info - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ìüë§"
    )
    bot.reply_to(message, help_text)


# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ URL ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
url = ''  # URL ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
directory_path = '/storage/emulated/0/bot/dataleak/'
output_file_path = ''

@bot.message_handler(commands=['search'])
def search_url(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå user.json ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists('user.json'):
        return bot.reply_to(message, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‚ùó‚ùó")

    with open('user.json', 'r') as f:
        users = json.load(f)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if user_id not in users or not users[user_id]["remaining_keys"]:
        return bot.reply_to(message, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‚ùó‚ùó")

    user_keys = users[user_id]["remaining_keys"]
    if not user_keys:
        return bot.reply_to(message, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‚ùå")

    key_to_use = next(iter(user_keys))

    if users[user_id]["remaining_keys"][key_to_use] <= 0:
        return bot.reply_to(message, "‚ùå ‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚ùå")

    args = message.text.split()
    if len(args) != 2:
        return bot.reply_to(message, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡πÉ‡∏ä‡πâ /search <URL>")

    url = args[1]
    output_file_path = f"{url}.txt"

    searching_msg = bot.reply_to(message, "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
   # searching_msg = bot.reply_to(message, "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")

    def check_log_files(directory, output_file_path):
        found_lines = set()
        try:
            with open(output_file_path, 'w', encoding='utf-8') as output_file:
                for file_name in os.listdir(directory):
                    file_path = os.path.join(directory, file_name)
                    if os.path.isfile(file_path):
                        try:
                            with open(file_path, 'r', encoding='utf-8') as file:
                                for line in file:
                                    if url in line and line not in found_lines:
                                        output_file.write(line)
                                        found_lines.add(line)
                        except UnicodeDecodeError:
                            with open(file_path, 'rb') as file:
                                for line in file:
                                    try:
                                        decoded_line = line.decode('utf-8')
                                        if url in decoded_line and decoded_line not in found_lines:
                                            output_file.write(decoded_line)
                                            found_lines.add(decoded_line)
                                    except UnicodeDecodeError:
                                        continue

        except FileNotFoundError:
            bot.edit_message_text("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå log", message.chat.id, searching_msg.message_id)
            return
        except PermissionError:
            bot.edit_message_text("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå log", message.chat.id, searching_msg.message_id)
            return

    check_log_files(directory_path, output_file_path)

    bot.delete_message(message.chat.id, searching_msg.message_id)
    # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if os.path.exists(output_file_path) and os.path.getsize(output_file_path) > 0:
        with open(output_file_path, 'rb') as file:
            bot.send_document(message.chat.id, file, caption="‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")

        # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
        users[user_id]["remaining_keys"][key_to_use] -= 1
        users[user_id]["used_keys"][key_to_use] += 1

        if users[user_id]["remaining_keys"][key_to_use] <= 0:
            del users[user_id]["remaining_keys"][key_to_use]

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        with open('user.json', 'w') as f:
            json.dump(users, f, indent=4)

        # ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        bot.send_message(
            ADMIN_ID,
            f"üîç ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL üîç\n"
            f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {username} ({user_id})\n"
            f"üîó ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL: {url}\n"
            f"üîë ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå: {key_to_use}\n"
            f"üìâ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {users[user_id]['remaining_keys'].get(key_to_use, 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        )
    else:
        bot.reply_to(message, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö URL ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚ùå")

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    #bot.delete_message(message.chat.id, searching_msg.message_id)

bot.polling(none_stop=True)

